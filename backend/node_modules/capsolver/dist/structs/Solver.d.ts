/// <reference types="node" />
import { RecaptchaV2Options, PendingCaptcha, CaptchaResult, RecaptchaEnterpriseOptions, RecaptchaV3Options, HCaptchaOptions } from "../types.js";
export default class Solver {
    private token;
    private _pending;
    private _processing;
    private _rates;
    private _pollInterval;
    private _defaultPayload;
    constructor(token: string, pollInterval?: number);
    private createTask;
    private getTaskResult;
    private getSolutions;
    registerPollEntry(id: string): Promise<CaptchaResult>;
    /**
     * Gets all pending/outsanding captchas.
     * @returns The current list of all unsolved captchas.
     */
    getPending(): PendingCaptcha[];
    /**
     * Gets the balance and package information of the account.
     * @returns The current balance of the account & any packages.
     */
    getBalance(): Promise<{
        balance: any;
        packages: any;
    }>;
    /**
     * Solves an image
     * @param image The image to solve in base64 or Buffer format.
     * @returns CaptchaResult containing the solution text.
     */
    imageToText(image: String | Buffer): Promise<CaptchaResult>;
    /**
     * Solves a reCAPTCHA v2 with or without a proxy.
     * @param websiteUrl The URL of the website where the reCAPTCHA is located.
     * @param websiteKey The sitekey of the reCAPTCHA.
     * @param options An object containing additional options, including proxy.
     * @returns CaptchaResult containing the solution key.
     * @throws {SolveError}
     */
    recaptchaV2(websiteUrl: string, websiteKey: string, options?: RecaptchaV2Options): Promise<CaptchaResult>;
    /**
     * Solves a reCAPTCHA v2 Enterprise with or without a proxy.
     * @param websiteUrl The URL of the website where the reCAPTCHA is located.
     * @param websiteKey The sitekey of the reCAPTCHA.
     * @param options An object containing additional options, including proxy & enterprise flags.
     * @returns CaptchaResult containing the solution key.
     * @throws {SolveError}
     */
    recaptchaV2Enterprise(websiteUrl: string, websiteKey: string, options?: RecaptchaEnterpriseOptions): Promise<CaptchaResult>;
    /**
     * Solves a reCAPTCHA v3 with or without a proxy.
     * @param websiteUrl The URL of the website where the reCAPTCHA is located.
     * @param websiteKey The sitekey of the reCAPTCHA.
     * @param pageAction The action value in the widget.
     * @param options An object containing additional options, including proxy & minScore.
     * @returns CaptchaResult containing the solution key.
     * @throws {SolveError}
     */
    recaptchaV3(websiteUrl: string, websiteKey: string, pageAction: string, options?: RecaptchaV3Options): Promise<CaptchaResult>;
    /**
     * Solves a hCaptcha with or without a proxy.
     * @param websiteUrl The URL of the website where the reCAPTCHA is located.
     * @param websiteKey The sitekey of the hcaptcha
     * @param options An object containing aditional options, including proxy.
     * @returns CaptchaResult containing solution key.
     * @throws {SolveError}
     */
    hcaptcha(websiteUrl: string, websiteKey: string, options: HCaptchaOptions): Promise<CaptchaResult>;
    /**
     * Classifies a list of images hcaptcha images to a given question.
     * @param queries An array of base64 encoded images or buffers.
     * @param question The question to slove.
     * @param coordinate If coordnates are required in the response.
     * @returns CaptchaResult containing the response data.
     * @throws {SolveError}
     */
    hcaptchaClassification(queries: (Buffer | string)[], question: string, coordinate?: boolean): Promise<CaptchaResult>;
}
//# sourceMappingURL=Solver.d.ts.map